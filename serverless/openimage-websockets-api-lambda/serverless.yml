service: openimagegenius-websockets-api
frameworkVersion: "3"

package:
  patterns:
    - "!node_modules/**"
    - "!auth-sls"
    - "!.serverless"
    - "!.gitignore"
    - "!package.json"
    - "!package-lock.json"
    - "!test_requirements.txt"

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage}
  region: eu-central-1
  websocketsApiName: openimage-websockets-api-${self:provider.stage}
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  websocketsDescription: Serverless Websockets for Using Facing API	
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.userTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.userTableName}/index/*"

functions:
  connectHandler:
    handler: event_handlers.connect
    events:
      - websocket: $connect
		
  defaultHandler:
    handler: event_handlers.default
    events:
      - websocket: $default #simple event definition without extra route property
	
  customFooHandler:
    handler: event_handlers.foo
    events:
      - websocket:
          route: foo # will trigger if $request.body.action === "foo"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements

custom:
  customDomain:
    domainName: ${self:provider.stage}.ws-api.openimagegenius.com
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: websocket
  pythonRequirements:
    zip: true
    layer: true
    usePipenv: false
  requestTableName: ${self:provider.stage}-request-table-name
  requestUniqueUserIdIndex: ${self:provider.stage}-request-unique-user-id-index

resources:
  Resources:
    RequestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.requestTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: request_id
            AttributeType: S
          - AttributeName: requester_unique_user_id
            AttributeType: S
        KeySchema:
          - AttributeName: request_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.requestUniqueUserIdIndex}
            KeySchema:
              - AttributeName: requester_unique_user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
