service: openimagegenius-websockets-api
frameworkVersion: "3"

package:
  patterns:
    - "!manual_dist"
    - "!node_modules/**"
    - "!auth-sls"
    - "!.serverless"
    - "!.gitignore"
    - "!package.json"
    - "!package-lock.json"
    - "!test_requirements.txt"

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage}
  region: eu-central-1
  websocketsApiName: openimage-websockets-api-${self:provider.stage}
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  websocketsDescription: Serverless Websockets for Using Facing API	
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.databaseInfo.requestTableName}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.databaseInfo.requestTableName}/index/*"

functions:
  connectionHandler:
    handler: event_handlers.connection
    events:
      - websocket: 
          route: $connect
          authorizer:
            arn: ${self:custom.authorizerArn}
            resultTtlInSeconds: 0
            identitySource:
              - 'route.request.header.Authorization'
            type: token

  defaultHandler:
    handler: event_handlers.default
    events:
      - websocket: $default #simple event definition without extra route property
	
  requestHandler:
    handler: event_handlers.request
    events:
      - websocket:
          route: request
          routeResponseSelectionExpression: $default
    enviromnet:
      SQS_REQUEST_URL: ${self:custom.imageProcessingQueueUrl}
plugins:
  - serverless-domain-manager
  - serverless-python-requirements

custom:
  authorizerArn: ${cf:openimagegenius-auth-dev.AuthorizerLambdaFunction}
  imageProcessingQueueUrl: !Ref ImageProcessingQueue
  customDomain:
    domainName: ${self:provider.stage}.ws-api.openimagegenius.com
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: REGIONAL
    securityPolicy: tls_1_2
    apiType: websocket
  pythonRequirements:
    zip: true
    layer: true
    usePipenv: false
    pipCmdExtraArgs:
      - --no-index
      - --find-links ./manual_dist
  databaseInfo: ${file(../../database/serverless.yml):custom}

resources:
  Resources:
    ImageProcessingQueueDLQ:
      Type: AWS::SQS::Queue
      Properties: 
        ContentBasedDeduplication: false
        DelaySeconds: 0
        FifoQueue: true
        QueueName: image-processing-dead-letter-queue-${self:provider.stage}.fifo
        Tags: 
          - Tag
        VisibilityTimeout: 30

    ImageProcessingQueue:
      Type: AWS::SQS::Queue
      Properties: 
        ContentBasedDeduplication: false
        DelaySeconds: 0
        FifoQueue: true
        QueueName: image-processing-${self:provider.stage}.fifo
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ImageProcessingQueueDLR.Arn
          maxReceiveCount: 3
        Tags: 
          - Tag
        VisibilityTimeout: 30
