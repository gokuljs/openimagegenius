service: openimagegenius-private-lambda

plugins:
  - serverless-s3-sync

frameworkVersion: "3"

package:
  patterns:
    - "!node_modules/**"
    - "!.serverless"
    - "!.gitignore"
    - "!packages"
    - "!models"
    - "!package.json"
    - "!package-lock.json"
    - "!pytest.ini"
    - "!build/**"
    - "!.requirements.zip"

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage}
  region: eu-central-1
  memorySize: 10240
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "s3:GetObject"
          Resource:
            - "arn:aws:s3:::${self:custom.bucketName}/*"
        - Effect: Allow
          Action:
            - "elasticfilesystem:*"
          Resource:
            - "arn:aws:elasticfilesystem:${aws:region}:${aws:accountId}:file-system/${self:custom.fileSystemId}"
            - "arn:aws:elasticfilesystem:${aws:region}:${aws:accountId}:access-point/${self:custom.efsAccessPoint}"

  environment:
    INSTALLER_BUCKET_NAME: ${self:custom.bucketName}
    MNT_DIR: ${self:custom.LocalMountPath}
    LIB_DIR: ${self:custom.LocalMountPath}/lib
    MODELS_DIR: ${self:custom.LocalMountPath}/models

custom:
  bucketName: openimagegenius-lib-deps-${self:provider.stage}
  s3Sync:
    # An example of possible configuration options
    - bucketName: ${self:custom.bucketName}
      localDir: ./build
      deleteRemoved: true # optional, indicates whether sync deletes files no longer present in localDir. Defaults to 'true'
      bucketTags:
        stage: ${self:provider.stage}
  cpuInferenceQueueName: cpu-inference-queue-${self:provider.stage}
  efsAccessPoint: fsap-0febe7ec922ddb9d9
  fileSystemId: fs-08f49ee7af2a582c2
  LocalMountPath: /mnt/fs
  subnetsId:
    subnet0: subnet-0d751dbe606be6491
  securityGroup: sg-03f639c0ff1e2110b

functions:
  installDependencies:
    handler: installer.handler
    timeout: 500
    vpc:
      securityGroupIds:
        - ${self:custom.securityGroup}
      subnetIds:
        - ${self:custom.subnetsId.subnet0}

  infer:
    handler: inference.handler
    timeout: 30
    vpc:
      securityGroupIds:
        - ${self:custom.securityGroup}
      subnetIds:
        - ${self:custom.subnetsId.subnet0}

resources:
  Resources:
    DependenciesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

  extensions:
    InstallDependenciesLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: "arn:aws:elasticfilesystem:${self:provider.region}:${aws:accountId}:access-point/${self:custom.efsAccessPoint}"
            LocalMountPath: "${self:custom.LocalMountPath}"
    InferLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: "arn:aws:elasticfilesystem:${self:provider.region}:${aws:accountId}:access-point/${self:custom.efsAccessPoint}"
            LocalMountPath: "${self:custom.LocalMountPath}"

  Outputs:
    CpuInferenceLambdaArn:
      Export:
        Name: cpu-inference-lambda-${self:provider.stage}-arn
      Value:
        Fn::GetAtt: InferLambdaFunction.Arn
