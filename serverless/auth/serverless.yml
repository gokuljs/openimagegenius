service: openimagegenius-auth
frameworkVersion: "3"

package:
  patterns:
    - "!node_modules/**"
    - "!auth-sls"
    - "!.serverless"
    - "!.requirements.zip"
    - "!.gitignore"
    - "!package.json"
    - "!package-lock.json"
    - "!requirements.txt"

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage}
  region: eu-central-1

functions:
  redirect:
    handler: handler.hello
    events:
      - http:
          path: /
          method: POST
    layers:
      - Ref: PythonRequirementsLambdaLayer

plugins:
  - serverless-domain-manager
  - serverless-python-requirements

custom:
  customDomain:
    domainName: ${self:provider.stage}.api.openimagegenius.com
    basePath: redirect
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: EDGE
    securityPolicy: tls_1_2
    apiType: rest
  pythonRequirements:
    zip: true
    layer: true
    usePipenv: false
  userTableName: ${self:provider.stage}-users-table

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: unique_user_id
            AttributeType: S
          - AttributeName: google_user_id
            AttributeType: S
          - AttributeName: user_google_email
            AttributeType: S
        KeySchema:
          - AttributeName: unique_user_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.stage}-google-id-index
            KeySchema:
              - AttributeName: google_user_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.stage}-user-google-email
            KeySchema:
              - AttributeName: user_google_email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
